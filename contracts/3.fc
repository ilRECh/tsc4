{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}

() recv_internal() {
}

global slice list_slice;
global int flag_size_g;
global int flag_g;
global int value_size_g;
global int value_g;
global int to_compare_g;
global int to_compare_size_g;
global tuple head;
global builder current_element;

forall X -> int is_null (X x) asm "ISNULL";

const INT_LEN = 256;

() load_from_chunked() impure inline  {

  int data_bits_remain_to_load = min(INT_LEN - to_compare_size_g, list_slice.slice_bits());

  while((INT_LEN - to_compare_size_g) > 0) {
    to_compare_size_g += data_bits_remain_to_load;
    to_compare_g |= list_slice~load_uint(data_bits_remain_to_load) << (INT_LEN - to_compare_size_g);

    if(list_slice.slice_bits() == 0) {
      if(~ list_slice.slice_refs_empty?()) {
        list_slice = (list_slice~load_ref()).begin_parse();
        data_bits_remain_to_load = min(INT_LEN - to_compare_size_g, list_slice.slice_bits());
      } else {
        to_compare_g >>= INT_LEN - to_compare_size_g;
        list_slice = null();
        return ();
      }
    }
  }

  return ();
}

() load_to_list_chunked(int value,
                        int value_size) impure inline {

  int to_load = min(1023 - current_element.builder_bits(), value_size);

  while(value_size > 0) {
    current_element~store_uint(value >> (value_size - to_load), to_load);
    value &= ~ ((value >> (value_size - to_load)) << (value_size - to_load));
    value_size -= to_load;
    to_load = min(value_size, 1023);

    if(current_element.builder_bits() == 1023) {
      head = cons(current_element, head);
      current_element = begin_cell();
    }
  }

  return ();
}

() examine() impure inline {
  int flag_offset = to_compare_size_g - flag_size_g;

  while(flag_offset >= 0) {
    if((to_compare_g & (flag_g << flag_offset)) == (flag_g << flag_offset)) {

      load_to_list_chunked(to_compare_g >> (flag_size_g + flag_offset), to_compare_size_g - (flag_size_g + flag_offset));
      load_to_list_chunked(value_g, value_size_g);

      to_compare_size_g -=  to_compare_size_g - flag_offset;
      to_compare_g &= ~ (-1 << flag_offset); 
    }

    flag_offset -= 1;
  }

  ;; Like, seriously)))))))) Try to compile the code without these two lines. What is wrong with you? Those are already ints, do you even check the global vars types?????
  int a = to_compare_g;
  int b = to_compare_size_g;

  load_to_list_chunked(a, b);

  to_compare_size_g = 0;
  to_compare_g = 0;

  return ();
}

;; Building cell linked-list from the list-style list
cell build_list() inline {
  cell result = current_element.end_cell();

  while(~ head.is_null()) {
    (current_element, head) = uncons(head);
    result = current_element.store_ref(result).end_cell();
  }

  return result;
}

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {

  list_slice = linked_list.begin_parse();

  if(list_slice.slice_empty?()) {
    return begin_cell().end_cell();
  }

  ;; searching for the position of the last non-zero bit in the flag integer
  ;; the flag int is guaranteed to be non-zero
  flag_size_g = 127;
  while((flag & (1 << flag_size_g)) == 0) {
    flag_size_g -= 1;
  }
  flag_size_g += 1;
  flag_g = flag;

  ;; searching for the position of the last non-zero bit in the value integer
  ;; the value int is guaranteed to be non-zero
  value_size_g = 127;
  while((value & (1 << value_size_g)) == 0) {
    value_size_g -= 1;
  }
  value_size_g += 1;
  value_g = value;

  to_compare_g = 0;
  to_compare_size_g = 0;

  head = null();
  current_element = begin_cell();

  do {
    load_from_chunked();
    examine();
  } until(list_slice.null?());

  return build_list();

  ;; while(true) {
  ;;   if((to_compare_g & bit_mask) == flag) {
    
  ;;     if(list_slice.null?()) {
  ;;       if(to_compare_size_g - flag_size_g > 0) {
  ;;         load_to_list_chunked(to_compare_g >> flag_size_g, to_compare_size_g - flag_size_g);
  ;;       }
  ;;       load_to_list_chunked(value, value_size);
  ;;       return build_list();
  ;;     }

  ;;     if(to_compare_size_g - flag_size_g > 0) {
  ;;       load_to_list_chunked(to_compare_g >> flag_size_g, to_compare_size_g - flag_size_g);
  ;;     }
  ;;     load_to_list_chunked(value, value_size);
  ;;     (to_compare_g, to_compare_size_g) = load_from_chunked();

  ;;   } else { ;; shift 1 bit

  ;;     if(list_slice.null?()) {
  ;;       load_to_list_chunked(to_compare_g, to_compare_size_g);
  ;;       return build_list();
  ;;     }

  ;;     to_compare_g = (to_compare_g << 1) | list_slice~load_uint(1);
  ;;     to_compare_size_g += 1;

  ;;     if(to_compare_size_g == 256) {
  ;;       load_to_list_chunked(to_compare_g >> flag_size_g, to_compare_size_g - flag_size_g);
  ;;       to_compare_size_g = flag_size_g;
  ;;       to_compare_g &= bit_mask;
  ;;     }

  ;;     if(list_slice.slice_bits() == 0) {
  ;;       if(~ list_slice.slice_refs_empty?()) {
  ;;         list_slice = (list_slice~load_ref()).begin_parse();
  ;;       } else {
  ;;         list_slice = null();
  ;;       }
  ;;     }
  ;;   }
  ;; }

  ;; return build_list();
}
