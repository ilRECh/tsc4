{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}

() recv_internal() {
}


forall X -> int is_null (X x) asm "ISNULL";

int count_bits(int number) inline {
  int bit_amount = 128;

  while(bit_amount - 1 >= 0) {
    if((number >> (bit_amount - 1)) & 1) {
      return bit_amount;
    }

    bit_amount -= 1;
  }

  return bit_amount;
}

(int, int, slice) load_from_chunked(int flag_size, slice list_slice) {
  int data_bits_remain_to_load = min(flag_size, list_slice.slice_bits());
  int result = 0;
  int result_size = 0;

  while(1) {
    result_size += data_bits_remain_to_load;
    result |= list_slice~load_uint(data_bits_remain_to_load) << (flag_size - data_bits_remain_to_load);
    flag_size -= data_bits_remain_to_load;

    if(list_slice.slice_bits() == 0) {
      if(~ list_slice.slice_refs_empty?()) {
        list_slice = (list_slice~load_ref()).begin_parse();
        data_bits_remain_to_load = min(flag_size, list_slice.slice_bits());
      } else {
        result >>= flag_size;
        return (result, result_size, null());
      }
    }

    if(flag_size <= 0) {
      return (result, result_size, list_slice);
    }
  }

  return (result, result_size, list_slice);
}

;; This means that the value in_result is at least flag_size sized
(int, slice) load_from_chunked_simple(int in_result, slice list_slice, int flag_size) {
  in_result = ((in_result & ((-1) ^ (1 << (flag_size - 1)))) << 1) | (list_slice~load_uint(1));

  if(list_slice.slice_bits() == 0) {
    if(~ list_slice.slice_refs_empty?()) {
      list_slice = (list_slice~load_ref()).begin_parse();
    } else {
      list_slice = null();
    }
  }

  return (in_result, list_slice);
}

;; I'm thinking that full value of the value must be loaded
(tuple, builder) load_to_list_chunked(int value,
                                      int value_size,
                                      tuple head,
                                      builder current_element) {

  int already_has = current_element.builder_bits();
  int to_load = min(1023 - already_has, value_size);

  while(value_size > 0) {
    current_element~store_uint(value >> (value_size - to_load), to_load);
    value &= ~ ((value >> (value_size - to_load)) << (value_size - to_load));
    value_size -= to_load;
    to_load = min(value_size, 1023);

    if(current_element.builder_bits() == 1023) {
      head = cons(current_element, head);
      current_element = begin_cell();
    }
  }

  return (head, current_element);
}

;; Building cell linked-list from the list-style list
cell build_list(tuple head) {
  (builder element, head) = uncons(head);
  cell result = element.end_cell();

  while(~ head.is_null()) {
    (element, head) = uncons(head);
    result = element.store_ref(result).end_cell();
  }

  return result;
}

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
  slice list_slice = linked_list.begin_parse();

  if(list_slice.slice_empty?()) {
    ;; return begin_cell().end_cell();
  }

  int flag_size = count_bits(flag);
  int value_size = count_bits(value);

  (int to_compare, int to_compare_size, list_slice) = load_from_chunked(flag_size, list_slice);

  tuple head = null();
  builder current_element = begin_cell();

  while(true) {
    if(to_compare == flag) {
      (head, current_element) = load_to_list_chunked(value, value_size, head, current_element);
    
      if(~ list_slice.null?()) {
        (to_compare, to_compare_size, list_slice) = load_from_chunked(flag_size, list_slice);
      } else {
        if(current_element.builder_bits() > 0) {
          head = cons(current_element, head);
        }

        return build_list(head);
        ;; return head;
      }
    } else { ;; shift 1 bit
      if(~ list_slice.null?()) {
        (head, current_element) = load_to_list_chunked((to_compare >> (flag_size - 1)) & 1, 1, head, current_element);
        (to_compare, list_slice) = load_from_chunked_simple(to_compare, list_slice, flag_size);
      } else {
        (head, current_element) = load_to_list_chunked(to_compare, to_compare_size, head, current_element);

        if(current_element.builder_bits() > 0) {
          head = cons(current_element, head);
        }

        return build_list(head);
        ;; return head;
      }
    }
    
  }

  return build_list(head);
  ;; return head;
}

;; ;; testable
;; (var) find_and_replace(int flag, int value, cell linked_list) method_id {
  
;;   tuple head = null();

;;   head = cons(begin_cell(), head);

;;   (head.car())~store_uint(1, 1);

;;   return head.car();
;; }
