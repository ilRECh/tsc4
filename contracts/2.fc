{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

int tlen(tuple t) asm "TLEN";

() recv_internal() {
}

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {

  tuple result = empty_tuple();

  if(matrixA.at(0).tlen() != matrixB.tlen()) {
    return null();
  }

  int A_columns_B_rows = matrixA.at(0).tlen();
  int B_columns = matrixB.at(0).tlen();
  int current_row_A = 0;
  int current_row_B = 0;
  int current_column_B = 0;

  repeat (matrixA.tlen()) {
    tuple matrixATuple = matrixA.at(current_row_A);

    tuple result_row = empty_tuple();

    repeat (B_columns) {
      int matrix_B_column_value = matrixB.at(0).at(current_column_B);

      int result_row_column_value = 0;

      repeat (A_columns_B_rows) {
        tuple matrixBTuple = matrixB.at(current_row_B);

        result_row_column_value += matrixATuple.at(current_row_B) * matrixBTuple.at(current_column_B);

        current_row_B += 1;
      }

      result_row~tpush(result_row_column_value);

      current_row_B = 0;

      current_column_B += 1;
    }

    result~tpush(result_row);

    current_column_B = 0;

    current_row_A += 1;
  }

  return result;
}

