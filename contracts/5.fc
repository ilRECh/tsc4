{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

tuple solve(int n, int k) asm """

  // k == 0 case
  DUP
  0 EQINT
  IFJMP:<{
    0 TUPLE
    1 RETARGS
  }>

  // Make n+k to k_i for amount of iterations
  OVER
  OVER
  ADD
  2 SUBINT

  // F_0
  0 PUSHINT

  // If now k_i == 0, then we have it, let's get out
  OVER
  -1 EQINT
  IFJMP:<{
    1 TUPLE
    1 RETARGS
  }>

  // F_1
  1 PUSHINT

  // Rotating to get the k_i, and put the original k to front
  s2 XCHG0
  s1 s3 XCHG

  // Calculating max F_n
  REPEAT:<{
    s2 s1 PUSH2
    ADD
    SWAP
  }>

  TUPLEVAR

  1 RETARGS

""";

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {

  return solve(n, k);

  ;; if(k == 0) {
  ;;   return empty_tuple();
  ;; }

  ;; tuple result = empty_tuple();

  ;; int fib = 0;
  ;; int n_1 = 1;

  ;; if(n == 0) {
  ;;   result~tpush(0);
  ;;   k -= 1;
  ;; }

  ;; repeat(n - 1) {
  ;;   (fib, n_1) = (n_1 + fib, fib);
  ;; }

  ;; repeat(k) {
  ;;   (fib, n_1) = (n_1 + fib, fib);
  ;;   result~tpush(fib);
  ;; }

  ;; return result;
}
