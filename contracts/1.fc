{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

() recv_internal() {
}

;; global cell current_cell;
;; global int is_found;
;; global int hash_to_find;

;; Current best is 7966 gas

;; () find_branch_by_hash_recursive() impure {
;;   if(hash_to_find == current_cell.cell_hash()) {
;;     is_found = true;
;;     return ();
;;   }

;;   slice tree_slice = current_cell.begin_parse();

;;   repeat (tree_slice.slice_refs()) {

;;     current_cell = tree_slice~load_ref();
;;     find_branch_by_hash_recursive();

;;     if(is_found) {
;;       return ();
;;     }
;;   }
;; }

;; testable
;; (cell) find_branch_by_hash(int hash, cell tree) method_id {

;;   hash_to_find = hash;
;;   is_found = false;
;;   current_cell = tree;

;;   find_branch_by_hash_recursive();

;;   if(is_found) {
;;     return current_cell;
;;   }

;;   return begin_cell().end_cell();
;; }

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

cell solve(int hash, cell tree) asm """
  // For the sake of the while loop
  SAMEALTSAVE

  // Setting the stop at the beginning, just in case no cell will satisfy us
  PUSHNULL
  SWAP

  WHILE:<{ 
    DUP
    ISNULL
    NOT
   }>DO<{

    // calculating cell hash
    DUP
    HASHCU

    // comparing cell hash with the provided hash 
    DEPTH
    DEC
    PICK
    EQUAL
    IFJMP:<{ 1 PUSHINT ONLYTOPX RETALT }>

    // loading refs
    CTOS
    DUP
    SREFS

    REPEAT:<{ LDREF }>

    // dropping the useless slice now
    DROP
   }>

  DUP
  ISNULL
  IFJMP:<{ 2DROP NEWC ENDC }>

  RET

""";

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {

  return solve(hash, tree);

  ;; tuple stack = null();
  ;; stack~push_back(tree);
  ;; slice cs = null();

  ;; while (~ stack.is_null()) {

  ;;     tree = stack~pop_back();

  ;;     if(hash == tree.cell_hash()) {
  ;;       dump_stack();
  ;;       return tree;
  ;;     }

  ;;     ;; if(hash == hash) {
  ;;     ;;   return null();
  ;;     ;; }

  ;;     cs = tree.begin_parse();

  ;;     repeat (cs.slice_refs()) {
  ;;         stack~push_back(cs~load_ref());
  ;;     }
  ;; }

  ;; return begin_cell().end_cell();
}
