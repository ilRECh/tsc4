{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

() recv_internal() {
}

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
  if(hash == tree.cell_hash()) {
    return tree;
  }
  
  slice ts = tree.begin_parse();

  repeat (ts.slice_refs()) {
    cell cell_to_return = find_branch_by_hash(hash, ts~load_ref());

    if(~ cell_to_return.begin_parse().slice_empty?()) {
      return cell_to_return;
    }
  }

  return begin_cell().end_cell();
}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

(cell) test () method_id {

    cell a = begin_cell()
        .store_uint(100, 16)
        .store_ref(begin_cell()
            .store_uint(102, 16)
            .end_cell())
        .end_cell();

    ;; just some cell for example
    cell c = begin_cell()
        .store_uint(1, 16)
        .store_ref(begin_cell()
            .store_uint(2, 16)
            .store_ref(a)
        .end_cell())
        .store_ref(begin_cell()
            .store_uint(3, 16)
            .store_ref(begin_cell()
                .store_uint(4, 16)
            .end_cell())
            .store_ref(begin_cell()
                .store_uint(5, 16)
            .end_cell())
        .end_cell())
    .end_cell();

    int hash = a.cell_hash();

    ;; ;; creating tuple with no data, which plays the role of stack
    ;; tuple stack = null();
    ;; ;; bring the main cell into the stack to process it in the loop
    ;; stack~push_back(c);
    ;; ;; do it until stack is not null
    ;; while (~ stack.is_null()) {
    ;;     ;; get the cell from the stack and convert it to a slice to be able to process it
    ;;     cell current_cell = stack~pop_back();
    ;;     slice cs = current_cell.begin_parse();

    ;;     ;; do something with s data

    ;;     if(hash == cs.slice_hash()) {
    ;;         return current_cell;
    ;;     }

    ;;     ;; if the current slice has any refs, add them to stack
    ;;     repeat (cs.slice_refs()) {
    ;;         stack~push_back(cs~load_ref());
    ;;     }
    ;; }

    ;; return begin_cell().end_cell();

    return find_branch_by_hash(hash, c);
}
